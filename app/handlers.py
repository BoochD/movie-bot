import re
import random
import math
from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from .database.database import add_user, save_request, get_user_requests, update_movie_count, get_user_movies
from .scrapers import scrap_search
from .kp_connection import get_info, get_random_info


router = Router()

WATCH_REG =  r'^(?:—Ö–æ—á—É\s+)?(?:–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|—Å–º–æ—Ç—Ä–µ—Ç—å|—É–≤–∏–¥–µ—Ç—å|–ø–æ—á–∏—Ç–∞—Ç—å|–æ–ø–∏—Å–∞–Ω–∏–µ)' \
            r'(?:\s*(–º—É–ª—å—Ç–∏–∫–µ|—Ñ–∏–ª—å–º–µ|—Å–µ—Ä–∏–∞–ª–µ|–º—É–ª—å—Ç—Ñ–∏–ª—å–º–µ|–º—É–ª—å—Ç–∏–∫–∞|—Ñ–∏–ª—å–º–∞|—Å–µ—Ä–∏–∞–ª–∞|–º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞|–º—É–ª—å—Ç–∏–∫|—Ñ–∏–ª—å–º|–∞–Ω–∏–º–µ|—Å–µ—Ä–∏–∞–ª|–º—É–ª—å—Ç—Ñ–∏–ª—å–º))?\s*"(.*)"$' \
            r'|^(?:—Ö–æ—á—É\s+)?(?:–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|—Å–º–æ—Ç—Ä–µ—Ç—å|—É–≤–∏–¥–µ—Ç—å|–ø–æ—á–∏—Ç–∞—Ç—å|–æ–ø–∏—Å–∞–Ω–∏–µ)' \
            r'(?:\s*(–º—É–ª—å—Ç–∏–∫–µ|—Ñ–∏–ª—å–º–µ|—Å–µ—Ä–∏–∞–ª–µ|–º—É–ª—å—Ç—Ñ–∏–ª—å–º–µ|–º—É–ª—å—Ç–∏–∫–∞|—Ñ–∏–ª—å–º–∞|—Å–µ—Ä–∏–∞–ª–∞|–º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞|–º—É–ª—å—Ç–∏–∫|—Ñ–∏–ª—å–º|–∞–Ω–∏–º–µ|—Å–µ—Ä–∏–∞–ª|–º—É–ª—å—Ç—Ñ–∏–ª—å–º))?\s*(.*)$'


@router.message(lambda message: message.sticker is not None)
async def handle_sticker(message: Message):
    stickers = [
        r'CAACAgIAAxkBAAENWqBnZAbVnBNrTRFvv5EQTwkAAZRsGFAAAlMBAAJ7TioQH1Qf9OSBQwk2BA',
        r'CAACAgIAAxkBAAENWqJnZAtoMRnQR3yz0DIxoqcMusltAwACp1wAAiK4kUn0lo1x9VwCvDYE',
        r'CAACAgIAAxkBAAENWpxnZAbP1b5hwk9kiNOOfjUScT5ivwAC7FMAAoB0kEuxRkD8V9DelTYE',
        r'CAACAgIAAxkBAAENWqRnZAuwiYNVg0uqPqnXLd5CmcoL2gACaAADZaIDLEOhZW-dvcUxNgQ'
    ]
    idx = random.randint(0, len(stickers) - 1)
    await message.answer_sticker(stickers[idx])

@router.message(CommandStart())
async def send_start(message: Message):
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!ü§ù\n"
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç 'cinema_bot' - –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–æ–≤, –∞–Ω–∏–º–µ, —Å–µ—Ä–∏–∞–ª–æ–≤ –∏ –ø—Ä–æ—á–µ–≥–æ –≤–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –≤ /help\n\n\n"
        )

@router.message(Command('help'))
async def send_help(message: Message):
    await message.answer(
        "–í–æ—Ç –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚úÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ - –Ω–∞–ø–∏—à–∏—Ç–µ:\n–°–º–æ—Ç—Ä–µ—Ç—å \"–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞\"\n\n"
        "‚úÖ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∏–ª—å–º - –Ω–∞–ø–∏—à–∏—Ç–µ:\n–ü–æ—Å–æ–≤–µ—Ç—É–π —á—Ç–æ-–Ω–∏–±—É–¥—å\n\n"
        "‚úÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ - –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/history\n\n"
        "‚úÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ - –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/stats\n\n"
        "üòé –î–ª—è –∫—Ä—É—Ç—ã—Ö - –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ: –°–º–æ—Ç—Ä–µ—Ç—å\n\n\n"
        "‚ùóÔ∏è –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Ñ–∏–ª—å–º –ø–æ—è–≤–∏–ª—Å—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, –Ω–æ –±–µ–∑ —Å—Å—ã–ª–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑."
        )

@router.message(Command('history'))
async def send_history(message: Message):
    history = await get_user_requests(message.from_user.id)
    text = "üìã–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20-–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –±–æ—Ç—É:\n\n"
    for i, item in enumerate(history):
        query = f"–ó–∞–ø—Ä–æ—Å ‚Ññ{i + 1}: <{item[0]}>\n"
        time = f"–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {item[1]}\n\n"
        text += query
        text += time
    await message.answer(text)

@router.message(Command('stats'))
async def send_stats(message: Message):
    stats = await get_user_movies(message.from_user.id)
    text = "üìã–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º —Ñ–∏–ª—å–º–∞–º:\n\n"
    for i, item in enumerate(stats):
        query = f"üîò{item[0]} ‚Äî {item[1]}\n\n"
        text += query
    await message.answer(text)

async def format_and_answer(message, title, content_type, description,
                            rating, result_link, backup_link, poster):
    emoji_list = ['ü§Æ','‚òπÔ∏è','üòï','üôÇ','üòÄ']
    idx_1 = math.ceil(rating['kp'] / 2) - 1 if math.ceil(rating['kp'] / 2) - 1 >= 0 else 0
    idx_2 = math.ceil(rating['imdb'] / 2) - 1 if math.ceil(rating['imdb'] / 2) - 1 >= 0 else 0
    emoji_1 = emoji_list[idx_1]
    emoji_2 = emoji_list[idx_2]
    caption = (
        f"–û–ø–∏—Å–∞–Ω–∏–µ {content_type.lower()} \"{title}\":\n\n{description}\n\n"
        f"üçø–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫: {rating['kp']}{emoji_1}\nüéû–†–µ–π—Ç–∏–Ω–≥ IMDB: {rating['imdb']}{emoji_2}"
    )
    if result_link is not None:
        caption += f"\n\nüé¨–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä: {result_link}"
    if backup_link is not None:
        caption += f"\nüòÅ–ê –≤–æ—Ç –∑–∞–ø–∞—Å–Ω–∞—è —Å—Å—ã–ª–∫–∞, –Ω—É —Ç–∞–∫, –Ω–∞ –≤—Å—è–∫–∏–π: {backup_link}"
    if len(caption) > 1024:
        idx = 1024
        curr = caption[:idx]
        await message.answer_photo(poster, caption=curr)
        while len(curr) >= 1024: 
            curr = caption[idx:idx+1024]
            idx += 1024
            await message.answer(curr)
        await message.answer("–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–µ–Ω–µ–Ω–∏—è.\n–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏–ª–æ—Å—å, —Ç–∞–∫ –∫–∞–∫ telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–µ–ª–∞—Ç—å "
                            "–∏—Ö –¥–ª–∏–Ω–Ω–µ–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤ ‚òπÔ∏è")
    else:
        await message.answer_photo(poster, caption=caption)

@router.message(lambda message: message.text.lower() == "–ø–æ—Å–æ–≤–µ—Ç—É–π —á—Ç–æ-–Ω–∏–±—É–¥—å" or
                message.text.lower() == "–ø–æ—Å–æ–≤–µ—Ç—É–π —á—Ç–æ –Ω–∏–±—É–¥—å")
async def send_random(message: Message):

    title, description, poster, movie_type, rating = await get_random_info()
    await add_user(message.from_user.id, message.from_user.username)
    await save_request(message.from_user.id, message.text)
    await update_movie_count(message.from_user.id, title)
    if movie_type in ['movie']:
            content_type = '—Ñ–∏–ª—å–º–∞'
    query = f'—Å–º–æ—Ç—Ä–µ—Ç—å {content_type} {title} –±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ–Ω–ª–∞–π–Ω'
    result_link, backup_link = await scrap_search(query)
    print(title)
    if title == '–ú–∞–≥–∏—è –ª—É–Ω–Ω–æ–≥–æ —Å–≤–µ—Ç–∞':
        result_link = 'https://lordfilms-sumerki.ru/magiya-lunnogo-sveta/'
            
    # print(f'{result_link=}')
    # print(f'{backup_link=}')
    await format_and_answer(message, title, content_type, description,
                             rating, result_link, backup_link, poster)
    
@router.message(lambda message: re.search(WATCH_REG, message.text, re.IGNORECASE))
async def watch(message: Message):
    await add_user(message.from_user.id, message.from_user.username)
    await save_request(message.from_user.id, message.text)
    found = re.search(
        WATCH_REG,
        message.text, 
        re.IGNORECASE
    )
    if found:
        if found.group(2):
            film_name = found.group(2).strip().capitalize()
        else:
            film_name = found.group(4).strip().capitalize()

        if not film_name:
           rayan_gosling = ['–î—Ä–∞–π–≤', '–ë–µ–≥—É—â–∏–π –ø–æ –ª–µ–∑–≤–∏—é','–°–ª–∞–≤–Ω—ã–µ –ø–∞—Ä–Ω–∏','–ß–µ–ª–æ–≤–µ–∫ –Ω–∞ –ª—É–Ω–µ',
                            '–§–∞–Ω–∞—Ç–∏–∫','–õ–∞-–ª–∞ –ª–µ–Ω–¥','–ú–µ—Å—Ç–æ –ø–æ–¥ —Å–æ—Å–Ω–∞–º–∏','–õ–∞—Ä—Å –∏ –Ω–∞—Å—Ç–æ—è—â–∞—è –¥–µ–≤—É—à–∫–∞']
           idx_gosl = random.randint(0, len(rayan_gosling) - 1)
           title, description, poster, movie_type, rating = await get_info(rayan_gosling[idx_gosl])
           await message.answer('–í—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –ø–æ—ç—Ç–æ–º—É –≤–æ—Ç –í–∞–º —Ñ–∏–ª—å–º —Å –†–∞–π–∞–Ω–æ–º –ì–æ—Å–ª–∏–Ω–≥–æ–ºüòé')
        else: 
            title, description, poster, movie_type, rating = await get_info(film_name)

        await update_movie_count(message.from_user.id, title)

        if movie_type == 'anime':
            content_type = '–∞–Ω–∏–º–µ'
        elif movie_type in ['movie', 'short', 'documentary']:
            content_type = '—Ñ–∏–ª—å–º–∞'
        elif movie_type in ['tv-series', 'miniseries']:
            content_type = '—Å–µ—Ä–∏–∞–ª–∞'
        elif movie_type in ['cartoon']:
            content_type = '–º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞'
        else:
            content_type = '–≤–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞'
       
        query = f'—Å–º–æ—Ç—Ä–µ—Ç—å {content_type} {title} –±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ–Ω–ª–∞–π–Ω'
        result_link, backup_link = await scrap_search(query)
        print(title)

        # print(f'{result_link=}')
        # print(f'{backup_link=}')
        await format_and_answer(message, title, content_type, description,
                                rating, result_link, backup_link, poster)
                  
    else:
        await message.answer(
            "–Ø –Ω–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å ü§î.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—è—Å—å —à–∞–±–ª–æ–Ω–∞:\n"
            "–°–º–æ—Ç—Ä–µ—Ç—å \"–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞\""
            )

@router.message()
async def send_sorry(message: Message):
    await message.answer(
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã‚òπÔ∏è.\n"
        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é, –Ω–∞–ø–∏—à–∏—Ç–µ /help"
    )
